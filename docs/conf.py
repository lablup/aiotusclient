# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import subprocess
from pathlib import Path
import re

_init_path = (Path(__file__).parent.parent / 'src' /
              'ai' / 'backend' / 'client' / '__init__.py')
_init_text = _init_path.read_text()
try:
    _version_info = re.search(
        r"^__version__ = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(?P<tag>.*)?'$",  # noqa
        _init_text, re.M).groupdict()
except IndexError:
    raise RuntimeError('Unable to determine version.')


on_rtd = os.environ.get('READTHEDOCS') == 'True'

if on_rtd:
    try:
        from ai.backend.client import request  # noqa
    except ImportError:
        subprocess.run('pip install -U "pip>=19.2" "setuptools>=41.2"', shell=True)
        subprocess.run('pip install -e "..[docs]"', shell=True)


# -- Project information -----------------------------------------------------

project = 'Backend.AI aiotusclient for Python'
copyright = '2019, Lablup Inc.'
author = 'Lablup Inc.'

# The short X.Y version.
version = '{major}.{minor}'.format(**_version_info)
# The full version, including alpha/beta/rc tags.
release = '{major}.{minor}.{patch}{tag}'.format(**_version_info)


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
    'sphinxcontrib_trio',
    'sphinx_autodoc_typehints',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

gettext_uuid = True
gettext_compact = False
locale_dirs = ['locale/']

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'tango'

highlight_language = 'python3'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'BackendAIClientSDKforPythonDocumentationdoc'


# -- Options for LaTeX output ------------------------------------------------
latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '11pt',
    'fontpkg': '',

    'preamble': r'''
    \usepackage{kotex}

    \usepackage{bera}
    \usepackage{beramono}

    \usepackage{setspace}
    \onehalfspacing
    %% \doublespacing
    %% \singlespacing

    \setcounter{tocdepth}{3}

    %% \nonstopmode
    ''',

    # Latex figure (float) alignment
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc,
     'BackendAIClientSDKforPythonDocumentation.tex',
     'Backend.AI Client SDK for Python Documentation',
     author, 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc,
     'backendaiclientsdkforpythondocumentation',
     'Backend.AI Client SDK for Python Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc,
     'BackendAIClientSDKforPythonDocumentation',
     'Backend.AI Client SDK for Python Documentation',
     author,
     'BackendAIClientSDKforPythonDocumentation',
     'Backend.AI Client SDK for Python',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('http://docs.python.org/3', None),
    'multidict':
        ('https://multidict.readthedocs.io/en/stable/', None),
    'yarl':
        ('https://yarl.readthedocs.io/en/stable/', None),
    'aiohttp':
        ('https://aiohttp.readthedocs.io/en/stable/', None),
    'backendai':
        ('https://docs.backend.ai/en/latest/', None),
}

autodoc_default_options = {
    'no-members': None,
    'no-undoc-members': None,
    'inherited-members': None,
    'ignore-module-all': None,
    'member-order': 'bysource',
}
autodoc_member_order = 'bysource'
